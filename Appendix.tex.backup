\chapter{Software documentation}
%st 1
The following appendix serves as additional documentation for the installation and use of the {\sc meqsilhouette} simulator. Please reference \citep{Blecher_2016} when publishing results based on {\sc meqsilhouette} simulations.

\section{Installation}
%st 1

The {\sc meqsilhouette} repository is currently private, however if made public it is maintained here\footnote{https://github.com/ratt-ru/MeqSilhouette}. For bug reports, if public, open an issue on github/submit a pull request, alternatively if private, please contact Tariq Blecher\footnote{tariq.blecher@gmail.com} or Roger Deane\footnote{deane.roger@gmail.com}. Currently, the simulator is running on {\sc Ubuntu 14.04} and has not been tested on other operating systems. Software requirements which are being maintained elsewhere and are publicly available: 
\begin{itemize}
 \item {\sc simms}\footnote{https://github.com/radio-astro/simms}
 \item {\sc MeqTrees}\footnote{https://ska-sa.github.io/meqtrees/} 
 \item {\sc Scatterbrane}\footnote{http://krosenfeld.github.io/scatterbrane}
\end{itemize}

Note that {\sc simms} in turn requires {\sc casa}, where we have had success with version 4.2.2. Several different routes for the installation of {\sc MeqTrees} are available\footnote{https://github.com/ska-sa/meqtrees/wiki/Installation}. As {\sc aatm} is not currently being maintained or easily available, we include it within the {\sc meqsilhouette} repository. 


Once the {\sc meqsilhouette} repository has been cloned, either add the framework module to the PYTHONPATH directly or install using pip,
\begin{verbatim}
$ cd MeqSilhouette/framework/; sudo pip install .
\end{verbatim}
\section{Usage}

%st 1
We will first discuss the simple case of running a simulation with the canonical pre-written driver script. Following this, we will discuss how to write one's own driver script. We also list various miscellaneous notes which one should to be aware of when using {\sc meqsilhouette}.
\subsection{Running a standard simulation}
%st1

We will focus on the standard `azishe' pipeline, the central concepts are captured in Fig.~\ref{flow}, however antenna pointing errors are not included and the sky model needs to be in {\sc fits} format. 

To run in the MeqSilhouette repository we pass the driver script and parameter dictionary to {\sc Python},
\begin{verbatim}
$python driver/azishe.py input/parameters.json
\end{verbatim}


%Experimenting with parameters
The content of the parameter dictionary is shown, slightly altered, in table~\ref{tab:parameters}. The parameters in the dictionary are altered by editing the dictionary directly. 

%logging
The primary log is set by `v.LOG' variable, initialised in the driver script. If the variable is commented out, the logs will display to screen. 

%Outputs
The output directory is set by the `v.OUTPUT' variable, initialised in the driver script. In this directory there will be a variety of files including the {\sc ms}, {\sc fits} sky models, a dirty image (if enabled), a number of dictionaries and arrays associated with analysing the data as well as a number of arrays and text files associated with the tropospheric corruption. See table~\ref{tab:outputs} for a brief explanation of each of these files. Note that Antenna based arrays to follow (Time, Freq, Antenna)
Arrays in the shape of DATA follow (Time, Freq, Pol) per baseline

\begin{longtable}{p{0.5\linewidth}|p{0.6\linewidth}}
name&comment\\
\hline
Measurement Set (.MS) & Final simulated Measurement set \\
Sky models (.fits)& Sky models which were observed\\
parameters.json &input parameter dictionary\\
(atm/antenna number)atm abs.txt&atmospheric opacity and sky brightness temperature output by {\sc atm}\\
(atm/antenna number)atm disp.txt&atmospheric delays output by {\sc atm}\\
closure phases (.p) & Dictionary of closure phases where keys are a tuple of station names (triangle dictionary)\\
closure phase uncertainties (.p) & Dictionary of closure phase uncertainties where keys are a tuple of station names (triangle dictionary)\\
Thermal noise (Jy) (.p)  & Dictionary of expected thermal noise levels used to generate closure phase uncertainties (baseline dictionary)\\
SNR (.p)  & Dictionary of SNR values (see equation~\ref{eq:snr}) used to generate closure phase uncertainties (baseline dictionary). \\
receiver noise (.npy) & thermal noise generated from SEFDs (MS-structured)\\
sky noise (.npy) & thermal noise generated from atmosphere (MS-structured)\\
transmission (.npy) & atmosphere transmission (antenna-based)\\
turbulent phases (.npy) & atmospheric phase terms (antenna-based)\\
Stokes I (.p)& visibilities in total intensity (baseline dictionary)\\
phase standard deviations (.npy)& standard deviations of the phase error between two data points at zenith (antenna-based)\\
turbulent phases (.npy) & turbulent contribution to the atmospheric phase error (antenna-based)\\
phase normalisation (.npy) & mean contribution to atmospheric phase error (antenna-based)\\

\caption[List and explanation of files output by a standard simulation]{List and explanation of files output by a standard simulation}
\label{tab:outputs}
\end{longtable}

\subsubsection{Further notes and reminders}
\begin{itemize}
 \item Note that if the content of antenna table is changed, so should the content of station information file which contains station $SEFD$ and weather information. 
 \item Ensure that the order of stations matches the order in the antenna table.
 \item Ensure that the antenna table is complete, including names, positions in metres and dish diameters.
 \item Ensure that the {\sc fits} file is complete with satisfactory header and data shape (see examples in the input dictionary for guidance).
 \item Currently one spectral window can be simulated at a time.
 \item Currently only total intensity can be simulated.
 \item There are several cautions related to usage of ScatterBrane, see original documentation \footnote{http://krosenfeld.github.io/scatterbrane/current/}. 
 \item The path of the folder containing the sky model is also located in the parameter dictionary, for multiple fits files, i.e. a time-variable source, the order of their implementation is the same as if their names with sorted with numpy.sort, where each fits files is observed for approximately the same amount of time. If the ISM-scattering is turned on, the extra logistics of moving and creating fits files and folders are automatically handled. 
\end{itemize}

\subsection{Writing a driver script}
 
Often it is useful to perform iterations of subset of steps of the standard pipeline which is straightforward with a \emph{for} loop and several simple functions or clearing and copying measurement sets. A number of different pipelines are available in the driver scripts folder, which should be provide `worked examples' when writing a novel driver script. The most important steps are:
\begin{enumerate}
 \item setup parameter dictionary as well as sub-dictionaries
 \item create measurement set
 \item initialise SimCoordinator class
 \item Use SimCoordinator to generate visibilities and apply signal corruptions
\end{enumerate}

 Also, it is also possible to save/load from most of the signal corruptions if you needed to ensure that the corruption used is exactly the same in different realisations. 



If additional instrumental corruptions are implemented, this should be within the TropMS class for consistency. Also it is important that the pipeline respects the causality of signal transmission path and/or the commutativity of Jones-matricies.


















